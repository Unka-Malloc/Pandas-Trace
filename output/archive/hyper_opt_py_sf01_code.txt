>> Query 1 (Q1) <<
{}
>> Optimized Query <<
============================================================
lineitem_aggr = li.sum(lambda x_lineitem: ({record({"l_returnflag": x_lineitem[0].l_returnflag, "l_linestatus": x_lineitem[0].l_linestatus}): record({"sum_qty": x_lineitem[0].l_quantity, "sum_base_price": x_lineitem[0].l_extendedprice, "sum_disc_price": ((x_lineitem[0].l_extendedprice) * (((1.0) - (x_lineitem[0].l_discount)))), "sum_charge": ((((x_lineitem[0].l_extendedprice) * (((1.0) - (x_lineitem[0].l_discount))))) * (((1.0) + (x_lineitem[0].l_tax)))), "avg_disc_sum_for_mean": x_lineitem[0].l_discount, "count_order": 1.0})}) if (x_lineitem[0].l_shipdate <= 19980902) else (None))

results = lineitem_aggr.sum(lambda x_lineitem_aggr: {record({"l_returnflag": x_lineitem_aggr[0].l_returnflag, "l_linestatus": x_lineitem_aggr[0].l_linestatus, "sum_qty": x_lineitem_aggr[1].sum_qty, "sum_base_price": x_lineitem_aggr[1].sum_base_price, "sum_disc_price": x_lineitem_aggr[1].sum_disc_price, "sum_charge": x_lineitem_aggr[1].sum_charge, "avg_qty": ((x_lineitem_aggr[1].sum_qty) / (x_lineitem_aggr[1].count_order)), "avg_price": ((x_lineitem_aggr[1].sum_base_price) / (x_lineitem_aggr[1].count_order)), "avg_disc": ((x_lineitem_aggr[1].avg_disc_sum_for_mean) / (x_lineitem_aggr[1].count_order)), "count_order": x_lineitem_aggr[1].count_order}): True})

============================================================
Reading T:/tpch_dataset/100M/lineitem.tbl Finished.
 SDQL Execution Time: 15.40691065788269 s 
Pandas Execution Time: 0.2001805305480957 s 
DuckDB Execution Time: 0.026023387908935547 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 1: Pass 
============================================================
>> Query 2 (Q2) <<
region_nation: neither joint
region ->
   | probe end: nation
   | build key: r_regionkey
   | probe key: n_regionkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

region_nation: neither joint
region ->
   | probe end: nation
   | build key: r_regionkey
   | probe key: n_regionkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

part ->
   | probe end: partsupp
   | build key: p_partkey
   | probe key: ps_partkey
   | rename columns: {}
   | insert columns: {}
   | project columns: ['p_partkey', 'p_mfgr']
   | unique columns: []
   | modify columns: []
   | result struct: None

>> Optimized Query <<
============================================================
europe = "EUROPE"
brass = "BRASS"
region_part = re.sum(lambda x_region: ({x_region[0].r_regionkey: True}) if (x_region[0].r_name == europe) else (None))

region_nation = na.sum(lambda x_nation: ({x_nation[0].n_nationkey: record({"n_nationkey": x_nation[0].n_nationkey, "n_name": x_nation[0].n_name})}) if (region_part[x_nation[0].n_regionkey] != None) else (None))

region_nation_supplier = su.sum(lambda x_supplier: ({x_supplier[0].s_suppkey: record({"s_suppkey": x_supplier[0].s_suppkey, "s_acctbal": x_supplier[0].s_acctbal, "s_name": x_supplier[0].s_name, "n_name": region_nation[x_supplier[0].s_nationkey].n_name, "s_address": x_supplier[0].s_address, "s_phone": x_supplier[0].s_phone, "s_comment": x_supplier[0].s_comment})}) if (region_nation[x_supplier[0].s_nationkey] != None) else (None))

region_nation_supplier_ps1 = ps.sum(lambda x_ps1: ({x_ps1[0].ps_partkey: record({"ps_partkey": x_ps1[0].ps_partkey, "ps_suppkey": x_ps1[0].ps_suppkey, "min_supplycost": x_ps1[0].ps_supplycost, "s_suppkey": x_ps1[0].ps_suppkey})}) if (region_nation_supplier[x_ps1[0].ps_suppkey] != None) else (None))

part_part = pa.sum(lambda x_part: ({x_part[0].p_partkey: record({"p_partkey": x_part[0].p_partkey, "p_mfgr": x_part[0].p_mfgr})}) if (((endsWith(x_part[0].p_type, brass)) * (x_part[0].p_size == 15))) else (None))

results = ps.sum(lambda x_partsupp: (((({record({"s_acctbal": region_nation_supplier[x_partsupp[0].ps_suppkey].s_acctbal, "s_name": region_nation_supplier[x_partsupp[0].ps_suppkey].s_name, "n_name": region_nation_supplier[x_partsupp[0].ps_suppkey].n_name, "p_partkey": part_part[x_partsupp[0].ps_partkey].p_partkey, "p_mfgr": part_part[x_partsupp[0].ps_partkey].p_mfgr, "s_address": region_nation_supplier[x_partsupp[0].ps_suppkey].s_address, "s_phone": region_nation_supplier[x_partsupp[0].ps_suppkey].s_phone, "s_comment": region_nation_supplier[x_partsupp[0].ps_suppkey].s_comment}): True}) if (x_partsupp[0].ps_supplycost == region_nation_supplier_ps1[x_partsupp[0].ps_partkey].min_supplycost) else (None)) if (region_nation_supplier[x_partsupp[0].ps_suppkey] != None) else (None)) if (region_nation_supplier_ps1[x_partsupp[0].ps_partkey] != None) else (None)) if (part_part[x_partsupp[0].ps_partkey] != None) else (None))

============================================================
Reading T:/tpch_dataset/100M/part.tbl Finished.
Reading T:/tpch_dataset/100M/supplier.tbl Finished.
Reading T:/tpch_dataset/100M/partsupp.tbl Finished.
Reading T:/tpch_dataset/100M/nation.tbl Finished.
Reading T:/tpch_dataset/100M/region.tbl Finished.
 SDQL Execution Time: 1.0589559078216553 s 
Pandas Execution Time: 0.04504108428955078 s 
DuckDB Execution Time: 0.041037797927856445 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 2: Pass 
============================================================
>> Query 3 (Q3) <<
customer_orders: neither joint
customer ->
   | probe end: orders
   | build key: c_custkey
   | probe key: o_custkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

>> Optimized Query <<
============================================================
building = "BUILDING"
customer_part = cu.sum(lambda x_customer: ({x_customer[0].c_custkey: True}) if (x_customer[0].c_mktsegment == building) else (None))

customer_orders = ord.sum(lambda x_orders: (({x_orders[0].o_orderkey: record({"o_orderdate": x_orders[0].o_orderdate, "o_shippriority": x_orders[0].o_shippriority})}) if (customer_part[x_orders[0].o_custkey] != None) else (None)) if (x_orders[0].o_orderdate < 19950315) else (None))

lineitem_aggr = li.sum(lambda x_lineitem: (({record({"l_orderkey": x_lineitem[0].l_orderkey, "o_orderdate": customer_orders[x_lineitem[0].l_orderkey].o_orderdate, "o_shippriority": customer_orders[x_lineitem[0].l_orderkey].o_shippriority}): ((x_lineitem[0].l_extendedprice) * (((1.0) - (x_lineitem[0].l_discount))))}) if (customer_orders[x_lineitem[0].l_orderkey] != None) else (None)) if (x_lineitem[0].l_shipdate > 19950315) else (None))

results = lineitem_aggr.sum(lambda x_lineitem_aggr: {record({"l_orderkey": x_lineitem_aggr[0].l_orderkey, "o_orderdate": x_lineitem_aggr[0].o_orderdate, "o_shippriority": x_lineitem_aggr[0].o_shippriority, "revenue": x_lineitem_aggr[1]}): True})

============================================================
Reading T:/tpch_dataset/100M/lineitem.tbl Finished.
Reading T:/tpch_dataset/100M/customer.tbl Finished.
Reading T:/tpch_dataset/100M/orders.tbl Finished.
 SDQL Execution Time: 6.71906304359436 s 
Pandas Execution Time: 0.13812541961669922 s 
DuckDB Execution Time: 0.03202962875366211 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 3: Pass 
============================================================
>> Query 4 (Q4) <<
{}
>> Optimized Query <<
============================================================
lineitem_part = li.sum(lambda x_lineitem: ({x_lineitem[0].l_orderkey: True}) if (x_lineitem[0].l_commitdate < x_lineitem[0].l_receiptdate) else (None))

orders_aggr = ord.sum(lambda x_orders: (({x_orders[0].o_orderpriority: 1.0}) if (lineitem_part[x_orders[0].o_orderkey] != None) else (None)) if (((x_orders[0].o_orderdate >= 19930701) * (x_orders[0].o_orderdate < 19931001))) else (None))

results = orders_aggr.sum(lambda x_orders_aggr: {record({"o_orderpriority": x_orders_aggr[0], "order_count": x_orders_aggr[1]}): True})

============================================================
Reading T:/tpch_dataset/100M/lineitem.tbl Finished.
Reading T:/tpch_dataset/100M/orders.tbl Finished.
 SDQL Execution Time: 7.559821605682373 s 
Pandas Execution Time: 0.12211036682128906 s 
DuckDB Execution Time: 0.034030914306640625 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 4: Pass 
============================================================
>> Query 5 (Q5) <<
supplier ->
   | probe end: region_nation_customer_orders_lineitem
   | build key: ['s_suppkey', 's_nationkey']
   | probe key: ['l_suppkey', 'c_nationkey']
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

region_nation: neither joint
region ->
   | probe end: nation
   | build key: r_regionkey
   | probe key: n_regionkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

>> Optimized Query <<
============================================================
asia = "ASIA"
region_part = re.sum(lambda x_region: ({x_region[0].r_regionkey: True}) if (x_region[0].r_name == asia) else (None))

region_nation = na.sum(lambda x_nation: ({x_nation[0].n_nationkey: record({"n_name": x_nation[0].n_name})}) if (region_part[x_nation[0].n_regionkey] != None) else (None))

region_nation_customer = cu.sum(lambda x_customer: ({x_customer[0].c_custkey: record({"c_nationkey": x_customer[0].c_nationkey, "n_name": region_nation[x_customer[0].c_nationkey].n_name})}) if (region_nation[x_customer[0].c_nationkey] != None) else (None))

region_nation_customer_orders = ord.sum(lambda x_orders: (({x_orders[0].o_orderkey: record({"c_nationkey": region_nation_customer[x_orders[0].o_custkey].c_nationkey, "n_name": region_nation_customer[x_orders[0].o_custkey].n_name})}) if (region_nation_customer[x_orders[0].o_custkey] != None) else (None)) if (((x_orders[0].o_orderdate >= 19940101) * (x_orders[0].o_orderdate < 19950101))) else (None))

supplier_part = su.sum(lambda x_supplier: {record({"s_suppkey": x_supplier[0].s_suppkey, "s_nationkey": x_supplier[0].s_nationkey}): True})

supplier_region_nation_customer_orders_lineitem = li.sum(lambda x_lineitem: (({region_nation_customer_orders[x_lineitem[0].l_orderkey].n_name: record({"revenue": ((x_lineitem[0].l_extendedprice) * (((1.0) - (x_lineitem[0].l_discount))))})}) if (supplier_part[record({"l_suppkey": x_lineitem[0].l_suppkey, "c_nationkey": region_nation_customer_orders[x_lineitem[0].l_orderkey].c_nationkey})] != None) else (None)) if (region_nation_customer_orders[x_lineitem[0].l_orderkey] != None) else (None))

results = supplier_region_nation_customer_orders_lineitem.sum(lambda x_supplier_region_nation_customer_orders_lineitem: {record({"n_name": x_supplier_region_nation_customer_orders_lineitem[0], "revenue": x_supplier_region_nation_customer_orders_lineitem[1].revenue}): True})

============================================================
Reading T:/tpch_dataset/100M/lineitem.tbl Finished.
Reading T:/tpch_dataset/100M/customer.tbl Finished.
Reading T:/tpch_dataset/100M/orders.tbl Finished.
Reading T:/tpch_dataset/100M/region.tbl Finished.
Reading T:/tpch_dataset/100M/nation.tbl Finished.
Reading T:/tpch_dataset/100M/supplier.tbl Finished.
 SDQL Execution Time: 6.778107166290283 s 
Pandas Execution Time: 0.09808850288391113 s 
DuckDB Execution Time: 0.0420377254486084 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 5: Pass 
============================================================
>> Query 6 (Q6) <<
>> Optimized Query <<
============================================================
lineitem_aggr = li.sum(lambda x_lineitem: (((x_lineitem[0].l_extendedprice) * (x_lineitem[0].l_discount))) if (((((((((x_lineitem[0].l_shipdate >= 19940101) * (x_lineitem[0].l_shipdate < 19950101))) * (x_lineitem[0].l_discount >= 0.05))) * (x_lineitem[0].l_discount <= 0.07))) * (x_lineitem[0].l_quantity < 24))) else (0.0))

results = {record({"revenue": lineitem_aggr}): True}
============================================================
Reading T:/tpch_dataset/100M/lineitem.tbl Finished.
 SDQL Execution Time: 10.980908870697021 s 
Pandas Execution Time: 0.06605935096740723 s 
DuckDB Execution Time: 0.016014575958251953 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 6: Pass 
============================================================
>> Query 7 (Q7) <<
n1_supplier: neither joint
n1 ->
   | probe end: supplier
   | build key: n_nationkey
   | probe key: s_nationkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

n2_customer: neither joint
n2 ->
   | probe end: customer
   | build key: n_nationkey
   | probe key: c_nationkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

>> Optimized Query <<
============================================================
france = "FRANCE"
germany = "GERMANY"
n1_part = na.sum(lambda x_n1: ({x_n1[0].n_nationkey: record({"n_name": x_n1[0].n_name})}) if (((x_n1[0].n_name == france) + (x_n1[0].n_name == germany))) else (None))

n1_supplier = su.sum(lambda x_supplier: ({x_supplier[0].s_suppkey: record({"n1_name": n1_part[x_supplier[0].s_nationkey].n_name})}) if (n1_part[x_supplier[0].s_nationkey] != None) else (None))

n2_part = na.sum(lambda x_n2: ({x_n2[0].n_nationkey: record({"n_name": x_n2[0].n_name})}) if (((x_n2[0].n_name == france) + (x_n2[0].n_name == germany))) else (None))

n2_customer = cu.sum(lambda x_customer: ({x_customer[0].c_custkey: record({"n_name": n2_part[x_customer[0].c_nationkey].n_name})}) if (n2_part[x_customer[0].c_nationkey] != None) else (None))

n2_customer_orders = ord.sum(lambda x_orders: ({x_orders[0].o_orderkey: record({"n2_name": n2_customer[x_orders[0].o_custkey].n_name})}) if (n2_customer[x_orders[0].o_custkey] != None) else (None))

n1_supplier_n2_customer_orders_lineitem = li.sum(lambda x_lineitem: (((({record({"supp_nation": n1_supplier[x_lineitem[0].l_suppkey].n1_name, "cust_nation": n2_customer_orders[x_lineitem[0].l_orderkey].n2_name, "l_year": extractYear(x_lineitem[0].l_shipdate)}): record({"revenue": ((x_lineitem[0].l_extendedprice) * (((1.0) - (x_lineitem[0].l_discount))))})}) if (((((n1_supplier[x_lineitem[0].l_suppkey].n1_name == france) * (n2_customer_orders[x_lineitem[0].l_orderkey].n2_name == germany))) + (((n1_supplier[x_lineitem[0].l_suppkey].n1_name == germany) * (n2_customer_orders[x_lineitem[0].l_orderkey].n2_name == france))))) else (None)) if (n1_supplier[x_lineitem[0].l_suppkey] != None) else (None)) if (n2_customer_orders[x_lineitem[0].l_orderkey] != None) else (None)) if (((x_lineitem[0].l_shipdate >= 19950101) * (x_lineitem[0].l_shipdate <= 19961231))) else (None))

results = n1_supplier_n2_customer_orders_lineitem.sum(lambda x_n1_supplier_n2_customer_orders_lineitem: {record({"supp_nation": x_n1_supplier_n2_customer_orders_lineitem[0].supp_nation, "cust_nation": x_n1_supplier_n2_customer_orders_lineitem[0].cust_nation, "l_year": x_n1_supplier_n2_customer_orders_lineitem[0].l_year, "revenue": x_n1_supplier_n2_customer_orders_lineitem[1].revenue}): True})

============================================================
Reading T:/tpch_dataset/100M/supplier.tbl Finished.
Reading T:/tpch_dataset/100M/lineitem.tbl Finished.
Reading T:/tpch_dataset/100M/orders.tbl Finished.
Reading T:/tpch_dataset/100M/customer.tbl Finished.
Reading T:/tpch_dataset/100M/nation.tbl Finished.
 SDQL Execution Time: 7.9001288414001465 s 
Pandas Execution Time: 0.10309314727783203 s 
DuckDB Execution Time: 0.07106423377990723 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 7: Pass 
============================================================
>> Query 8 (Q8) <<
n2 ->
   | probe end: supplier_part_region_n1_customer_orders_lineitem
   | build key: n2_nationkey
   | probe key: s_nationkey
   | rename columns: {'n_nationkey': 'n2_nationkey', 'n_name': 'n2_name', 'n_regionkey': 'n2_regionkey', 'n_comment': 'n2_comment'}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

supplier ->
   | probe end: part_region_n1_customer_orders_lineitem
   | build key: s_suppkey
   | probe key: l_suppkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

part ->
   | probe end: region_n1_customer_orders_lineitem
   | build key: p_partkey
   | probe key: l_partkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

region_n1: neither joint
region ->
   | probe end: n1
   | build key: r_regionkey
   | probe key: n1_regionkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

>> Optimized Query <<
============================================================
economyanodizedsteel = "ECONOMY ANODIZED STEEL"
america = "AMERICA"
brazil = "BRAZIL"
n2_part = na.sum(lambda x_n2: {x_n2[0].n_nationkey: record({"n2_comment": x_n2[0].n_comment, "n2_name": x_n2[0].n_name, "n2_nationkey": x_n2[0].n_nationkey, "n2_regionkey": x_n2[0].n_regionkey})})

supplier_part = su.sum(lambda x_supplier: {x_supplier[0].s_suppkey: record({"s_nationkey": x_supplier[0].s_nationkey})})

part_part = pa.sum(lambda x_part: ({x_part[0].p_partkey: True}) if (x_part[0].p_type == economyanodizedsteel) else (None))

region_part = re.sum(lambda x_region: ({x_region[0].r_regionkey: True}) if (x_region[0].r_name == america) else (None))

region_n1 = na.sum(lambda x_n1: ({x_n1[0].n_nationkey: record({"n1_nationkey": x_n1[0].n_nationkey})}) if (region_part[x_n1[0].n_regionkey] != None) else (None))

region_n1_customer = cu.sum(lambda x_customer: ({x_customer[0].c_custkey: True}) if (region_n1[x_customer[0].c_nationkey] != None) else (None))

region_n1_customer_orders = ord.sum(lambda x_orders: (({x_orders[0].o_orderkey: record({"o_orderdate": x_orders[0].o_orderdate})}) if (region_n1_customer[x_orders[0].o_custkey] != None) else (None)) if (((x_orders[0].o_orderdate >= 19950101) * (x_orders[0].o_orderdate <= 19961231))) else (None))

n2_supplier_part_region_n1_customer_orders_lineitem = li.sum(lambda x_lineitem: (((({extractYear(region_n1_customer_orders[x_lineitem[0].l_orderkey].o_orderdate): record({"A": (((x_lineitem[0].l_extendedprice) * (((1.0) - (x_lineitem[0].l_discount))))) if (n2_part[supplier_part[x_lineitem[0].l_suppkey].s_nationkey].n2_name == brazil) else (0.0), "B": ((x_lineitem[0].l_extendedprice) * (((1.0) - (x_lineitem[0].l_discount))))})}) if (n2_part[supplier_part[x_lineitem[0].l_suppkey].s_nationkey] != None) else (None)) if (supplier_part[x_lineitem[0].l_suppkey] != None) else (None)) if (part_part[x_lineitem[0].l_partkey] != None) else (None)) if (region_n1_customer_orders[x_lineitem[0].l_orderkey] != None) else (None))

results = n2_supplier_part_region_n1_customer_orders_lineitem.sum(lambda x_n2_supplier_part_region_n1_customer_orders_lineitem: {record({"o_year": x_n2_supplier_part_region_n1_customer_orders_lineitem[0], "mkt_share": ((x_n2_supplier_part_region_n1_customer_orders_lineitem[1].A) / (x_n2_supplier_part_region_n1_customer_orders_lineitem[1].B))}): True})

============================================================
Reading T:/tpch_dataset/100M/part.tbl Finished.
Reading T:/tpch_dataset/100M/supplier.tbl Finished.
Reading T:/tpch_dataset/100M/lineitem.tbl Finished.
Reading T:/tpch_dataset/100M/orders.tbl Finished.
Reading T:/tpch_dataset/100M/customer.tbl Finished.
Reading T:/tpch_dataset/100M/nation.tbl Finished.
Reading T:/tpch_dataset/100M/region.tbl Finished.
 SDQL Execution Time: 7.053365230560303 s 
Pandas Execution Time: 0.13212013244628906 s 
DuckDB Execution Time: 0.05004596710205078 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 8: Pass 
============================================================
>> Query 9 (Q9) <<
nation_supplier: neither joint
nation ->
   | probe end: supplier
   | build key: n_nationkey
   | probe key: s_nationkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

part ->
   | probe end: partsupp
   | build key: p_partkey
   | probe key: ps_partkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

orders ->
   | probe end: lineitem
   | build key: o_orderkey
   | probe key: l_orderkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

>> Optimized Query <<
============================================================
green = "green"
nation_part = na.sum(lambda x_nation: {x_nation[0].n_nationkey: record({"n_name": x_nation[0].n_name})})

nation_supplier = su.sum(lambda x_supplier: ({x_supplier[0].s_suppkey: record({"n_name": nation_part[x_supplier[0].s_nationkey].n_name})}) if (nation_part[x_supplier[0].s_nationkey] != None) else (None))

part_part = pa.sum(lambda x_part: ({x_part[0].p_partkey: True}) if (firstIndex(x_part[0].p_name, green) != ((-1) * (1))) else (None))

nation_supplier_part_partsupp = ps.sum(lambda x_partsupp: (({record({"ps_suppkey": x_partsupp[0].ps_suppkey, "ps_partkey": x_partsupp[0].ps_partkey}): record({"n_name": nation_supplier[x_partsupp[0].ps_suppkey].n_name, "ps_partkey": x_partsupp[0].ps_partkey, "ps_suppkey": x_partsupp[0].ps_suppkey, "ps_supplycost": x_partsupp[0].ps_supplycost})}) if (nation_supplier[x_partsupp[0].ps_suppkey] != None) else (None)) if (part_part[x_partsupp[0].ps_partkey] != None) else (None))

orders_part = ord.sum(lambda x_orders: {x_orders[0].o_orderkey: record({"o_orderdate": x_orders[0].o_orderdate})})

nation_supplier_part_partsupp_orders_lineitem = li.sum(lambda x_lineitem: (({record({"nation": nation_supplier_part_partsupp[record({"l_suppkey": x_lineitem[0].l_suppkey, "l_partkey": x_lineitem[0].l_partkey})].n_name, "o_year": extractYear(orders_part[x_lineitem[0].l_orderkey].o_orderdate)}): record({"sum_profit": ((((x_lineitem[0].l_extendedprice) * (((1.0) - (x_lineitem[0].l_discount))))) - (((nation_supplier_part_partsupp[record({"l_suppkey": x_lineitem[0].l_suppkey, "l_partkey": x_lineitem[0].l_partkey})].ps_supplycost) * (x_lineitem[0].l_quantity))))})}) if (nation_supplier_part_partsupp[record({"l_suppkey": x_lineitem[0].l_suppkey, "l_partkey": x_lineitem[0].l_partkey})] != None) else (None)) if (orders_part[x_lineitem[0].l_orderkey] != None) else (None))

results = nation_supplier_part_partsupp_orders_lineitem.sum(lambda x_nation_supplier_part_partsupp_orders_lineitem: {record({"nation": x_nation_supplier_part_partsupp_orders_lineitem[0].nation, "o_year": x_nation_supplier_part_partsupp_orders_lineitem[0].o_year, "sum_profit": x_nation_supplier_part_partsupp_orders_lineitem[1].sum_profit}): True})

============================================================
Reading T:/tpch_dataset/100M/lineitem.tbl Finished.
Reading T:/tpch_dataset/100M/orders.tbl Finished.
Reading T:/tpch_dataset/100M/nation.tbl Finished.
Reading T:/tpch_dataset/100M/supplier.tbl Finished.
Reading T:/tpch_dataset/100M/part.tbl Finished.
Reading T:/tpch_dataset/100M/partsupp.tbl Finished.
 SDQL Execution Time: 11.311968326568604 s 
Pandas Execution Time: 0.4323902130126953 s 
DuckDB Execution Time: 0.05605125427246094 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 9: Pass 
============================================================
>> Query 10 (Q10) <<
nation ->
   | probe end: customer_orders
   | build key: n_nationkey
   | probe key: c_nationkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

customer ->
   | probe end: orders
   | build key: c_custkey
   | probe key: o_custkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

>> Optimized Query <<
============================================================
r = "R"
nation_part = na.sum(lambda x_nation: {x_nation[0].n_nationkey: record({"n_name": x_nation[0].n_name})})

customer_part = cu.sum(lambda x_customer: {x_customer[0].c_custkey: record({"c_acctbal": x_customer[0].c_acctbal, "c_address": x_customer[0].c_address, "c_comment": x_customer[0].c_comment, "c_custkey": x_customer[0].c_custkey, "c_name": x_customer[0].c_name, "c_phone": x_customer[0].c_phone, "c_nationkey": x_customer[0].c_nationkey})})

nation_customer_orders = ord.sum(lambda x_orders: (((({x_orders[0].o_orderkey: record({"o_orderkey": x_orders[0].o_orderkey, "c_custkey": x_orders[0].o_custkey, "c_name": customer_part[x_orders[0].o_custkey].c_name, "c_acctbal": customer_part[x_orders[0].o_custkey].c_acctbal, "c_phone": customer_part[x_orders[0].o_custkey].c_phone, "n_name": nation_part[customer_part[x_orders[0].o_custkey].c_nationkey].n_name, "c_address": customer_part[x_orders[0].o_custkey].c_address, "c_comment": customer_part[x_orders[0].o_custkey].c_comment})}) if (customer_part[x_orders[0].o_custkey] != None) else (None)) if (nation_part[customer_part[x_orders[0].o_custkey].c_nationkey] != None) else (None)) if (customer_part[x_orders[0].o_custkey] != None) else (None)) if (((x_orders[0].o_orderdate >= 19931001) * (x_orders[0].o_orderdate < 19940101))) else (None))

lineitem_aggr = li.sum(lambda x_lineitem: (({record({"c_custkey": nation_customer_orders[x_lineitem[0].l_orderkey].c_custkey, "c_name": nation_customer_orders[x_lineitem[0].l_orderkey].c_name, "c_acctbal": nation_customer_orders[x_lineitem[0].l_orderkey].c_acctbal, "c_phone": nation_customer_orders[x_lineitem[0].l_orderkey].c_phone, "n_name": nation_customer_orders[x_lineitem[0].l_orderkey].n_name, "c_address": nation_customer_orders[x_lineitem[0].l_orderkey].c_address, "c_comment": nation_customer_orders[x_lineitem[0].l_orderkey].c_comment}): ((x_lineitem[0].l_extendedprice) * (((1.0) - (x_lineitem[0].l_discount))))}) if (nation_customer_orders[x_lineitem[0].l_orderkey] != None) else (None)) if (x_lineitem[0].l_returnflag == r) else (None))

results = lineitem_aggr.sum(lambda x_lineitem_aggr: {record({"c_custkey": x_lineitem_aggr[0].c_custkey, "c_name": x_lineitem_aggr[0].c_name, "c_acctbal": x_lineitem_aggr[0].c_acctbal, "c_phone": x_lineitem_aggr[0].c_phone, "n_name": x_lineitem_aggr[0].n_name, "c_address": x_lineitem_aggr[0].c_address, "c_comment": x_lineitem_aggr[0].c_comment, "revenue": x_lineitem_aggr[1]}): True})

============================================================
Reading T:/tpch_dataset/100M/customer.tbl Finished.
Reading T:/tpch_dataset/100M/orders.tbl Finished.
Reading T:/tpch_dataset/100M/lineitem.tbl Finished.
Reading T:/tpch_dataset/100M/nation.tbl Finished.
 SDQL Execution Time: 7.135438919067383 s 
Pandas Execution Time: 0.1211087703704834 s 
DuckDB Execution Time: 0.036032676696777344 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 10: Pass 
============================================================
>> Query 11 (Q11) <<
nation_supplier: neither joint
nation ->
   | probe end: supplier
   | build key: n_nationkey
   | probe key: s_nationkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

>> Optimized Query <<
============================================================
germany = "GERMANY"
nation_part = na.sum(lambda x_nation: ({x_nation[0].n_nationkey: True}) if (x_nation[0].n_name == germany) else (None))

nation_supplier = su.sum(lambda x_supplier: ({x_supplier[0].s_suppkey: True}) if (nation_part[x_supplier[0].s_nationkey] != None) else (None))

partsupp_aggr = ps.sum(lambda x_partsupp: (record({"filt_val": ((((x_partsupp[0].ps_supplycost) * (x_partsupp[0].ps_availqty))) * (0.0001)), "filt_agg": sr_dict({x_partsupp[0].ps_partkey: ((x_partsupp[0].ps_supplycost) * (x_partsupp[0].ps_availqty))})})) if (nation_supplier[x_partsupp[0].ps_suppkey] != None) else (None))

results = partsupp_aggr.filt_agg.sum(lambda x_partsupp_aggr: ({record({"ps_partkey": x_partsupp_aggr[0], "value": x_partsupp_aggr[1]}): True}) if (x_partsupp_aggr[1] > partsupp_aggr.filt_val) else (None))

============================================================
Reading T:/tpch_dataset/100M/partsupp.tbl Finished.
Reading T:/tpch_dataset/100M/supplier.tbl Finished.
Reading T:/tpch_dataset/100M/nation.tbl Finished.
 SDQL Execution Time: 0.4223818778991699 s 
Pandas Execution Time: 0.7156543731689453 s 
DuckDB Execution Time: 0.020010948181152344 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 11: Pass 
============================================================
>> Query 12 (Q12) <<
orders_lineitem: neither joint
orders ->
   | probe end: lineitem
   | build key: o_orderkey
   | probe key: l_orderkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

>> Optimized Query <<
============================================================
mail = "MAIL"
ship = "SHIP"
urgent1 = "1-URGENT"
high2 = "2-HIGH"
orders_part = ord.sum(lambda x_orders: {x_orders[0].o_orderkey: record({"o_orderpriority": x_orders[0].o_orderpriority})})

lineitem_aggr = li.sum(lambda x_lineitem: (({x_lineitem[0].l_shipmode: record({"high_line_count": (1) if (((orders_part[x_lineitem[0].l_orderkey].o_orderpriority == urgent1) + (orders_part[x_lineitem[0].l_orderkey].o_orderpriority == high2))) else (0), "low_line_count": (1) if (((orders_part[x_lineitem[0].l_orderkey].o_orderpriority != urgent1) * (orders_part[x_lineitem[0].l_orderkey].o_orderpriority != high2))) else (0)})}) if (orders_part[x_lineitem[0].l_orderkey] != None) else (None)) if (((((((((((x_lineitem[0].l_shipmode == ship) + (x_lineitem[0].l_shipmode == mail))) * (x_lineitem[0].l_commitdate < x_lineitem[0].l_receiptdate))) * (x_lineitem[0].l_shipdate < x_lineitem[0].l_commitdate))) * (x_lineitem[0].l_receiptdate >= 19940101))) * (x_lineitem[0].l_receiptdate < 19950101))) else (None))

results = lineitem_aggr.sum(lambda x_lineitem_aggr: {record({"l_shipmode": x_lineitem_aggr[0], "high_line_count": x_lineitem_aggr[1].high_line_count, "low_line_count": x_lineitem_aggr[1].low_line_count}): True})

============================================================
Reading T:/tpch_dataset/100M/orders.tbl Finished.
Reading T:/tpch_dataset/100M/lineitem.tbl Finished.
 SDQL Execution Time: 11.282180786132812 s 
Pandas Execution Time: 0.24222755432128906 s 
DuckDB Execution Time: 0.027024269104003906 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 12: Pass 
============================================================
>> Query 13 (Q13) <<
orders_customer: neither joint
orders ->
   | probe end: customer
   | build key: o_custkey
   | probe key: c_custkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

>> Optimized Query <<
============================================================
special = "special"
requests = "requests"
orders_part = ord.sum(lambda x_orders: ({x_orders[0].o_custkey: record({"c_count": 1.0})}) if (((firstIndex(x_orders[0].o_comment, special) != -1) * (firstIndex(x_orders[0].o_comment, requests) > ((firstIndex(x_orders[0].o_comment, special)) + (6)))) == False) else (None))

customer_aggr = cu.sum(lambda x_customer: {record({"c_count": (orders_part[x_customer[0].c_custkey].c_count) if (orders_part[x_customer[0].c_custkey] != None) else (0.0)}): 1.0})

results = customer_aggr.sum(lambda x_customer_aggr: {record({"c_count": x_customer_aggr[0].c_count, "custdist": x_customer_aggr[1]}): True})

============================================================
Reading T:/tpch_dataset/100M/customer.tbl Finished.
Reading T:/tpch_dataset/100M/orders.tbl Finished.
 SDQL Execution Time: 2.0638625621795654 s 
Pandas Execution Time: 0.3473048210144043 s 
DuckDB Execution Time: 0.029026269912719727 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 13: Pass 
============================================================
>> Query 14 (Q14) <<
part_lineitem: neither joint
part ->
   | probe end: lineitem
   | build key: p_partkey
   | probe key: l_partkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

>> Optimized Query <<
============================================================
promo = "PROMO"
part_part = pa.sum(lambda x_part: ({x_part[0].p_partkey: True}) if (startsWith(x_part[0].p_type, promo)) else (None))

part_lineitem = li.sum(lambda x_lineitem: (record({"A": (((x_lineitem[0].l_extendedprice) * (((1.0) - (x_lineitem[0].l_discount))))) if (part_part[x_lineitem[0].l_partkey] != None) else (0.0), "B": ((x_lineitem[0].l_extendedprice) * (((1.0) - (x_lineitem[0].l_discount))))})) if (((x_lineitem[0].l_shipdate >= 19950901) * (x_lineitem[0].l_shipdate < 19951001))) else (None))

results = ((((part_lineitem.A) * (100.0))) / (part_lineitem.B))
============================================================
Reading T:/tpch_dataset/100M/lineitem.tbl Finished.
Reading T:/tpch_dataset/100M/part.tbl Finished.
 SDQL Execution Time: 6.449820518493652 s 
Pandas Execution Time: 0.11910748481750488 s 
DuckDB Execution Time: 0.023021221160888672 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 14: Pass 
============================================================
>> Query 15 (Q15) <<
supplier_lineitem: neither joint
{}
supplier ->
   | probe end: lineitem
   | build key: s_suppkey
   | probe key: l_suppkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

>> Optimized Query <<
============================================================
lineitem_aggr = li.sum(lambda x_lineitem: ({x_lineitem[0].l_suppkey: ((x_lineitem[0].l_extendedprice) * (((1.0) - (x_lineitem[0].l_discount))))}) if (((x_lineitem[0].l_shipdate >= 19960101) * (x_lineitem[0].l_shipdate < 19960401))) else (None))

supplier_part = su.sum(lambda x_supplier: {x_supplier[0].s_suppkey: True})

results = lineitem_aggr.sum(lambda x_lineitem_aggr: (({record({"s_suppkey": x_lineitem_aggr[0], "s_name": supplier_part[x_lineitem_aggr[0]].s_name, "s_address": supplier_part[x_lineitem_aggr[0]].s_address, "s_phone": supplier_part[x_lineitem_aggr[0]].s_phone, "total_revenue": x_lineitem_aggr[1]}): True}) if (x_lineitem_aggr[1] == 1772627.2087) else (None)) if (supplier_part[x_lineitem_aggr[0]] != None) else (None))

============================================================
Reading T:/tpch_dataset/100M/lineitem.tbl Finished.
Reading T:/tpch_dataset/100M/supplier.tbl Finished.
 SDQL Execution Time: 7.032345533370972 s 
Pandas Execution Time: 0.06606006622314453 s 
DuckDB Execution Time: 0.019017457962036133 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 15: Pass 
============================================================
>> Query 16 (Q16) <<
part_partsupp: neither joint
part ->
   | probe end: partsupp
   | build key: p_partkey
   | probe key: ps_partkey
   | rename columns: {}
   | insert columns: {}
   | project columns: ['p_partkey', 'p_brand', 'p_type', 'p_size']
   | unique columns: []
   | modify columns: []
   | result struct: None

>> Optimized Query <<
============================================================
brand45 = "Brand#45"
mediumpolished = "MEDIUM POLISHED"
customer = "Customer"
complaints = "Complaints"
part_part = pa.sum(lambda x_part: ({x_part[0].p_partkey: record({"p_partkey": x_part[0].p_partkey, "p_brand": x_part[0].p_brand, "p_type": x_part[0].p_type, "p_size": x_part[0].p_size})}) if (((((x_part[0].p_brand != brand45) * (startsWith(x_part[0].p_type, mediumpolished) == False))) * (((((((((((((((x_part[0].p_size == 9) + (x_part[0].p_size == 36))) + (x_part[0].p_size == 49))) + (x_part[0].p_size == 14))) + (x_part[0].p_size == 23))) + (x_part[0].p_size == 45))) + (x_part[0].p_size == 19))) + (x_part[0].p_size == 3))))) else (None))

supplier_part = su.sum(lambda x_supplier: ({x_supplier[0].s_suppkey: True}) if (((firstIndex(x_supplier[0].s_comment, customer) != ((-1) * (1))) * (firstIndex(x_supplier[0].s_comment, complaints) > ((firstIndex(x_supplier[0].s_comment, customer)) + (7))))) else (None))

partsupp_aggr = ps.sum(lambda x_partsupp: (({record({"p_brand": part_part[x_partsupp[0].ps_partkey].p_brand, "p_type": part_part[x_partsupp[0].ps_partkey].p_type, "p_size": part_part[x_partsupp[0].ps_partkey].p_size}): sr_dict({x_partsupp[0].ps_suppkey: True})}) if (supplier_part[x_partsupp[0].ps_suppkey] == None) else (None)) if (part_part[x_partsupp[0].ps_partkey] != None) else (None))

results = partsupp_aggr.sum(lambda x_partsupp_aggr: {record({"p_brand": x_partsupp_aggr[0].p_brand, "p_type": x_partsupp_aggr[0].p_type, "p_size": x_partsupp_aggr[0].p_size, "supplier_cnt": dictSize(x_partsupp_aggr[1])}): True})

============================================================
Reading T:/tpch_dataset/100M/partsupp.tbl Finished.
Reading T:/tpch_dataset/100M/part.tbl Finished.
Reading T:/tpch_dataset/100M/supplier.tbl Finished.
 SDQL Execution Time: 1.2481250762939453 s 
Pandas Execution Time: 0.18617653846740723 s 
DuckDB Execution Time: 0.03602433204650879 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 16: Pass 
============================================================
>> Query 17 (Q17) <<
part_l1: neither joint
part ->
   | probe end: l1
   | build key: p_partkey
   | probe key: l_partkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

>> Optimized Query <<
============================================================
brand23 = "Brand#23"
medbox = "MED BOX"
part_part = pa.sum(lambda x_part: ({x_part[0].p_partkey: True}) if (((x_part[0].p_brand == brand23) * (x_part[0].p_container == medbox))) else (None))

part_l1 = li.sum(lambda x_l1: ({x_l1[0].l_partkey: record({"count_quant": 1.0, "sum_quant": x_l1[0].l_quantity})}) if (part_part[x_l1[0].l_partkey] != None) else (None))

part_l1_lineitem = li.sum(lambda x_lineitem: (record({"price": ((x_lineitem[0].l_extendedprice) if (x_lineitem[0].l_quantity < ((0.2) * (((part_l1[x_lineitem[0].l_partkey].sum_quant) / (part_l1[x_lineitem[0].l_partkey].count_quant))))) else (0.0)) if (part_l1[x_lineitem[0].l_partkey] != None) else (0.0)})) if (True) else (None))

results = ((part_l1_lineitem.price) / (7.0))
============================================================
Reading T:/tpch_dataset/100M/lineitem.tbl Finished.
Reading T:/tpch_dataset/100M/part.tbl Finished.
 SDQL Execution Time: 10.953677654266357 s 
Pandas Execution Time: 0.2532196044921875 s 
DuckDB Execution Time: 0.03603315353393555 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 17: Pass 
============================================================
>> Query 18 (Q18) <<
customer_orders: neither joint
customer ->
   | probe end: orders
   | build key: c_custkey
   | probe key: o_custkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

>> Optimized Query <<
============================================================
customer_part = cu.sum(lambda x_customer: {x_customer[0].c_custkey: record({"c_custkey": x_customer[0].c_custkey, "c_name": x_customer[0].c_name})})

lineitem_aggr = li.sum(lambda x_lineitem: {x_lineitem[0].l_orderkey: x_lineitem[0].l_quantity})

lineitem_part = lineitem_aggr.sum(lambda x_lineitem_aggr: ({x_lineitem_aggr[0]: True}) if (x_lineitem_aggr[1] > 300) else (None))

customer_orders = ord.sum(lambda x_orders: (({x_orders[0].o_orderkey: record({"c_custkey": x_orders[0].o_custkey, "c_name": customer_part[x_orders[0].o_custkey].c_name, "o_orderdate": x_orders[0].o_orderdate, "o_orderkey": x_orders[0].o_orderkey, "o_totalprice": x_orders[0].o_totalprice})}) if (customer_part[x_orders[0].o_custkey] != None) else (None)) if (lineitem_part[x_orders[0].o_orderkey] != None) else (None))

l1_aggr = li.sum(lambda x_l1: ({record({"c_name": customer_orders[x_l1[0].l_orderkey].c_name, "c_custkey": customer_orders[x_l1[0].l_orderkey].c_custkey, "o_orderkey": x_l1[0].l_orderkey, "o_orderdate": customer_orders[x_l1[0].l_orderkey].o_orderdate, "o_totalprice": customer_orders[x_l1[0].l_orderkey].o_totalprice}): x_l1[0].l_quantity}) if (customer_orders[x_l1[0].l_orderkey] != None) else (None))

results = l1_aggr.sum(lambda x_l1_aggr: {record({"c_name": x_l1_aggr[0].c_name, "c_custkey": x_l1_aggr[0].c_custkey, "o_orderkey": x_l1_aggr[0].o_orderkey, "o_orderdate": x_l1_aggr[0].o_orderdate, "o_totalprice": x_l1_aggr[0].o_totalprice, "sum_quantity": x_l1_aggr[1]}): True})

============================================================
Reading T:/tpch_dataset/100M/lineitem.tbl Finished.
Reading T:/tpch_dataset/100M/customer.tbl Finished.
Reading T:/tpch_dataset/100M/orders.tbl Finished.
 SDQL Execution Time: 12.311109781265259 s 
Pandas Execution Time: 0.1401355266571045 s 
DuckDB Execution Time: 0.0530390739440918 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 18: Pass 
============================================================
>> Query 19 (Q19) <<
part_lineitem: neither joint
part ->
   | probe end: lineitem
   | build key: p_partkey
   | probe key: l_partkey
   | rename columns: {}
   | insert columns: {}
   | project columns: ['p_partkey', 'p_brand']
   | unique columns: []
   | modify columns: []
   | result struct: None

>> Optimized Query <<
============================================================
brand12 = "Brand#12"
smcase = "SM CASE"
smbox = "SM BOX"
smpack = "SM PACK"
smpkg = "SM PKG"
brand23 = "Brand#23"
medbag = "MED BAG"
medbox = "MED BOX"
medpkg = "MED PKG"
medpack = "MED PACK"
brand34 = "Brand#34"
lgcase = "LG CASE"
lgbox = "LG BOX"
lgpack = "LG PACK"
lgpkg = "LG PKG"
air = "AIR"
airreg = "AIR REG"
deliverinperson = "DELIVER IN PERSON"
part_part = pa.sum(lambda x_part: ({x_part[0].p_partkey: record({"p_partkey": x_part[0].p_partkey, "p_brand": x_part[0].p_brand})}) if (((((((((((x_part[0].p_brand == brand12) * (((((((x_part[0].p_container == smpkg) + (x_part[0].p_container == smpack))) + (x_part[0].p_container == smcase))) + (x_part[0].p_container == smbox))))) * (x_part[0].p_size >= 1))) * (x_part[0].p_size <= 5))) + (((((((x_part[0].p_brand == brand23) * (((((((x_part[0].p_container == medpack) + (x_part[0].p_container == medpkg))) + (x_part[0].p_container == medbag))) + (x_part[0].p_container == medbox))))) * (x_part[0].p_size >= 1))) * (x_part[0].p_size <= 10))))) + (((((((x_part[0].p_brand == brand34) * (((((((x_part[0].p_container == lgpkg) + (x_part[0].p_container == lgpack))) + (x_part[0].p_container == lgcase))) + (x_part[0].p_container == lgbox))))) * (x_part[0].p_size >= 1))) * (x_part[0].p_size <= 15))))) else (None))

lineitem_aggr = li.sum(lambda x_lineitem: (((((x_lineitem[0].l_extendedprice) * (((1.0) - (x_lineitem[0].l_discount))))) if (((((((part_part[x_lineitem[0].l_partkey].p_brand == brand12) * (((x_lineitem[0].l_quantity >= 1) * (x_lineitem[0].l_quantity <= 11))))) + (((part_part[x_lineitem[0].l_partkey].p_brand == brand23) * (((x_lineitem[0].l_quantity >= 10) * (x_lineitem[0].l_quantity <= 20))))))) + (((part_part[x_lineitem[0].l_partkey].p_brand == brand34) * (((x_lineitem[0].l_quantity >= 20) * (x_lineitem[0].l_quantity <= 30))))))) else (0.0)) if (part_part[x_lineitem[0].l_partkey] != None) else (0.0)) if (((((x_lineitem[0].l_shipmode == air) + (x_lineitem[0].l_shipmode == airreg))) * (x_lineitem[0].l_shipinstruct == deliverinperson))) else (0.0))

results = {record({"revenue": lineitem_aggr}): True}
============================================================
Reading T:/tpch_dataset/100M/lineitem.tbl Finished.
Reading T:/tpch_dataset/100M/part.tbl Finished.
 SDQL Execution Time: 6.367745876312256 s 
Pandas Execution Time: 0.08907747268676758 s 
DuckDB Execution Time: 0.027024507522583008 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 19: Pass 
============================================================
>> Query 20 (Q20) <<
nation_supplier: neither joint
lineitem_partsupp: neither joint
lineitem ->
   | probe end: partsupp
   | build key: ['l_partkey', 'l_suppkey']
   | probe key: ['ps_partkey', 'ps_suppkey']
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

nation ->
   | probe end: supplier
   | build key: n_nationkey
   | probe key: s_nationkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

>> Optimized Query <<
============================================================
canada = "CANADA"
forest = "forest"
nation_part = na.sum(lambda x_nation: ({x_nation[0].n_nationkey: True}) if (x_nation[0].n_name == canada) else (None))

part_part = pa.sum(lambda x_part: ({x_part[0].p_partkey: True}) if (startsWith(x_part[0].p_name, forest)) else (None))

supplier_part = su.sum(lambda x_supplier: {x_supplier[0].s_suppkey: True})

lineitem_part = li.sum(lambda x_lineitem: ((({record({"l_partkey": x_lineitem[0].l_partkey, "l_suppkey": x_lineitem[0].l_suppkey}): record({"sum_quantity": x_lineitem[0].l_quantity})}) if (part_part[x_lineitem[0].l_partkey] != None) else (None)) if (supplier_part[x_lineitem[0].l_suppkey] != None) else (None)) if (((x_lineitem[0].l_shipdate >= 19940101) * (x_lineitem[0].l_shipdate < 19950101))) else (None))

lineitem_partsupp = ps.sum(lambda x_partsupp: (({x_partsupp[0].ps_suppkey: True}) if (x_partsupp[0].ps_availqty > ((lineitem_part[record({"ps_partkey": x_partsupp[0].ps_partkey, "ps_suppkey": x_partsupp[0].ps_suppkey})].sum_quantity) * (0.5))) else (None)) if (lineitem_part[record({"ps_partkey": x_partsupp[0].ps_partkey, "ps_suppkey": x_partsupp[0].ps_suppkey})] != None) else (None))

results = su.sum(lambda x_supplier: (({record({"s_name": x_supplier[0].s_name, "s_address": x_supplier[0].s_address}): True}) if (nation_part[x_supplier[0].s_nationkey] != None) else (None)) if (lineitem_partsupp[x_supplier[0].s_suppkey] != None) else (None))

============================================================
Reading T:/tpch_dataset/100M/supplier.tbl Finished.
Reading T:/tpch_dataset/100M/nation.tbl Finished.
Reading T:/tpch_dataset/100M/partsupp.tbl Finished.
Reading T:/tpch_dataset/100M/part.tbl Finished.
Reading T:/tpch_dataset/100M/lineitem.tbl Finished.
 SDQL Execution Time: 7.438713073730469 s 
Pandas Execution Time: 0.09808802604675293 s 
DuckDB Execution Time: 0.04103732109069824 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 20: Pass 
============================================================
>> Query 21 (Q21) <<
orders ->
   | probe end: nation_supplier_l3_l2_lineitem
   | build key: o_orderkey
   | probe key: l_orderkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

nation_supplier: neither joint
nation ->
   | probe end: supplier
   | build key: n_nationkey
   | probe key: s_nationkey
   | rename columns: {}
   | insert columns: {}
   | project columns: []
   | unique columns: []
   | modify columns: []
   | result struct: None

l3 ->
   | probe end: l2_lineitem
   | build key: l_orderkey
   | probe key: l_orderkey
   | rename columns: {}
   | insert columns: {}
   | project columns: ['l_orderkey', 'l3_size']
   | unique columns: []
   | modify columns: []
   | result struct: None

l2 ->
   | probe end: lineitem
   | build key: l_orderkey
   | probe key: l_orderkey
   | rename columns: {}
   | insert columns: {}
   | project columns: ['l_orderkey', 'l2_size']
   | unique columns: []
   | modify columns: []
   | result struct: None

>> Optimized Query <<
============================================================
f = "F"
saudiarabia = "SAUDI ARABIA"
orders_part = ord.sum(lambda x_orders: ({x_orders[0].o_orderkey: True}) if (x_orders[0].o_orderstatus == f) else (None))

nation_part = na.sum(lambda x_nation: ({x_nation[0].n_nationkey: True}) if (x_nation[0].n_name == saudiarabia) else (None))

nation_supplier = su.sum(lambda x_supplier: ({x_supplier[0].s_suppkey: record({"s_name": x_supplier[0].s_name})}) if (nation_part[x_supplier[0].s_nationkey] != None) else (None))

l3_part = li.sum(lambda x_l3: ({x_l3[0].l_orderkey: record({"l3_size": 1})}) if (x_l3[0].l_receiptdate > x_l3[0].l_commitdate) else (None))

l2_part = li.sum(lambda x_l2: {x_l2[0].l_orderkey: record({"l2_size": 1})})

orders_nation_supplier_l3_l2_lineitem = li.sum(lambda x_lineitem: (((((({nation_supplier[x_lineitem[0].l_suppkey].s_name: record({"numwait": 1.0})}) if (((l2_part[x_lineitem[0].l_orderkey].l2_size > 1) * (l3_part[x_lineitem[0].l_orderkey].l3_size == 1))) else (None)) if (orders_part[x_lineitem[0].l_orderkey] != None) else (None)) if (nation_supplier[x_lineitem[0].l_suppkey] != None) else (None)) if (l3_part[x_lineitem[0].l_orderkey] != None) else (None)) if (l2_part[x_lineitem[0].l_orderkey] != None) else (None)) if (x_lineitem[0].l_receiptdate > x_lineitem[0].l_commitdate) else (None))

results = orders_nation_supplier_l3_l2_lineitem.sum(lambda x_orders_nation_supplier_l3_l2_lineitem: {record({"s_name": x_orders_nation_supplier_l3_l2_lineitem[0], "numwait": x_orders_nation_supplier_l3_l2_lineitem[1].numwait}): True})

============================================================
Reading T:/tpch_dataset/100M/supplier.tbl Finished.
Reading T:/tpch_dataset/100M/lineitem.tbl Finished.
Reading T:/tpch_dataset/100M/orders.tbl Finished.
Reading T:/tpch_dataset/100M/nation.tbl Finished.
 SDQL Execution Time: 21.40432357788086 s 
Pandas Execution Time: 0.9048161506652832 s 
DuckDB Execution Time: 0.0890805721282959 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 21: Pass 
============================================================
>> Query 22 (Q22) <<
{'sum_acctbal': sum_acctbal, 'count_acctbal': count_acctbal}
RecAccessExpr(PairAccessExpr(x_customer, 0), 'c_phone')
>> Optimized Query <<
============================================================
v13 = "13"
v31 = "31"
v23 = "23"
v29 = "29"
v30 = "30"
v18 = "18"
v17 = "17"
cu1_aggr = cu.sum(lambda x_cu1: (record({"sum_acctbal": x_cu1[0].c_acctbal, "count_acctbal": 1.0})) if (((x_cu1[0].c_acctbal > 0.0) * (((((((((((((startsWith(x_cu1[0].c_phone, v13)) + (startsWith(x_cu1[0].c_phone, v31)))) + (startsWith(x_cu1[0].c_phone, v23)))) + (startsWith(x_cu1[0].c_phone, v29)))) + (startsWith(x_cu1[0].c_phone, v30)))) + (startsWith(x_cu1[0].c_phone, v18)))) + (startsWith(x_cu1[0].c_phone, v17)))))) else (None))

count_acctbal = cu1_aggr.count_acctbal
sum_acctbal = cu1_aggr.sum_acctbal
orders_part = ord.sum(lambda x_orders: {x_orders[0].o_custkey: True})

customer_aggr = cu.sum(lambda x_customer: (({substr(x_customer[0].c_phone, 0, 1): record({"numcust": 1.0, "totacctbal": x_customer[0].c_acctbal})}) if (orders_part[x_customer[0].c_custkey] == None) else (None)) if (((x_customer[0].c_acctbal > ((sum_acctbal) / (count_acctbal))) * (((((((((((((startsWith(x_customer[0].c_phone, v13)) + (startsWith(x_customer[0].c_phone, v31)))) + (startsWith(x_customer[0].c_phone, v23)))) + (startsWith(x_customer[0].c_phone, v29)))) + (startsWith(x_customer[0].c_phone, v30)))) + (startsWith(x_customer[0].c_phone, v18)))) + (startsWith(x_customer[0].c_phone, v17)))))) else (None))

results = customer_aggr.sum(lambda x_customer_aggr: {record({"cntrycode": x_customer_aggr[0], "numcust": x_customer_aggr[1].numcust, "totacctbal": x_customer_aggr[1].totacctbal}): True})

============================================================
Reading T:/tpch_dataset/100M/customer.tbl Finished.
Reading T:/tpch_dataset/100M/orders.tbl Finished.
 SDQL Execution Time: 1.6755118370056152 s 
Pandas Execution Time: 0.07306551933288574 s 
DuckDB Execution Time: 0.02602362632751465 s 
============================================================
>> Comparing Pandas with Duck ... <<
============================================================
 Check Pandas with DuckDB: Pass 
============================================================
============================================================
>> Comparing SDQL with Pandas ... <<
============================================================
 Query 22: Pass 
============================================================
1:  Pass 
2:  Pass 
3:  Pass 
4:  Pass 
5:  Pass 
6:  Pass 
7:  Pass 
8:  Pass 
9:  Pass 
10:  Pass 
11:  Pass 
12:  Pass 
13:  Pass 
14:  Pass 
15:  Pass 
16:  Pass 
17:  Pass 
18:  Pass 
19:  Pass 
20:  Pass 
21:  Pass 
22:  Pass 
============================================================
6.029047807057698
