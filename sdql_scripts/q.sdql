let part = load[{<p_partkey: int, p_name: string, p_mfgr: string, p_brand: string, p_type: string, p_size: int, p_container: string, p_retailprice: double, p_comment: string> -> int}]("T:/UG4-Proj/datasets/part.tbl")
let lineitem = load[{<l_orderkey: int, l_partkey: int, l_suppkey: int, l_linenumber: int, l_quantity: int, l_extendedprice: double, l_discount: double, l_tax: double, l_returnflag: string, l_linestatus: string, l_shipdate: date, l_commitdate: date, l_receiptdate: date, l_shipinstruct: string, l_shipmode: string, l_comment: string> -> int}]("T:/UG4-Proj/datasets/lineitem.tbl")
let lmp = sum (<l_k, l_v> in lineitem) if (((date(19950301) <= l_k.l_shipdate) && (l_k.l_shipdate < date(19950401)))) then { l_k -> 1 } else {  }
let part_l = lmp
let Rm0 = sum (<pl_k, pl_v> in part_l) sum (<p_k, p_v> in part) if ((pl_k.l_partkey == p_k.p_partkey)) then { concat(pl_k, p_k) -> pl_v * p_v } else {  }
let rmp = sum (<r0_k, r0_v> in Rm0) if (ext(`StrStartsWith`, r0_k.p_type, "PROMO")) then { concat(r0_k, < promo=(r0_k.l_extendedprice * (1 - r0_k.l_discount)) >) -> 1 } else { concat(r0_k, < promo=0 >) -> 1 }
let tmp = sum (<r_k, r_v> in rmp) < promo_revenue=((100 * r_k.promo) / (r_k.l_extendedprice * (1 - r_k.l_discount))) * r_v >
let tmpa = { < promo_revenue=tmp.promo_revenue > -> 1 }
tmpa