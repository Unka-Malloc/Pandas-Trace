let part = load[{<p_partkey: int, p_name: string, p_mfgr: string, p_brand: string, p_type: string, p_size: int, p_container: string, p_retailprice: double, p_comment: string> -> int}]("T:/UG4-Proj/datasets/part.tbl")
let pmp = sum (<par_k, par_v> in part) if (((((((par_k.p_brand == "Brand#54") && ((((par_k.p_container == "SM PKG") || (par_k.p_container == "SM PACK")) || (par_k.p_container == "SM CASE")) || (par_k.p_container == "SM BOX"))) && (1 <= par_k.p_size)) && (par_k.p_size <= 5)) || ((((par_k.p_brand == "Brand#22") && ((((par_k.p_container == "MED PACK") || (par_k.p_container == "MED PKG")) || (par_k.p_container == "MED BAG")) || (par_k.p_container == "MED BOX"))) && (1 <= par_k.p_size)) && (par_k.p_size <= 10))) || ((((par_k.p_brand == "Brand#13") && ((((par_k.p_container == "LG PKG") || (par_k.p_container == "LG PACK")) || (par_k.p_container == "LG CASE")) || (par_k.p_container == "LG BOX"))) && (1 <= par_k.p_size)) && (par_k.p_size <= 15)))) then { par_k -> 1 } else {  }
let sub_p = pmp
let lineitem = load[{<l_orderkey: int, l_partkey: int, l_suppkey: int, l_linenumber: int, l_quantity: int, l_extendedprice: double, l_discount: double, l_tax: double, l_returnflag: string, l_linestatus: string, l_shipdate: date, l_commitdate: date, l_receiptdate: date, l_shipinstruct: string, l_shipmode: string, l_comment: string> -> int}]("T:/UG4-Proj/datasets/lineitem.tbl")
let lmp = sum (<lin_k, lin_v> in lineitem) if (((((((1 <= lin_k.l_quantity) && (lin_k.l_quantity <= 11)) && ((lin_k.l_shipmode == "AIR REG") || (lin_k.l_shipmode == "AIR"))) && (lin_k.l_shipinstruct == "DELIVER IN PERSON")) || ((((18 <= lin_k.l_quantity) && (lin_k.l_quantity <= 28)) && ((lin_k.l_shipmode == "AIR REG") || (lin_k.l_shipmode == "AIR"))) && (lin_k.l_shipinstruct == "DELIVER IN PERSON"))) || ((((26 <= lin_k.l_quantity) && (lin_k.l_quantity <= 36)) && ((lin_k.l_shipmode == "AIR REG") || (lin_k.l_shipmode == "AIR"))) && (lin_k.l_shipinstruct == "DELIVER IN PERSON")))) then { lin_k -> 1 } else {  }
let sub_l = lmp
let Rm0 = sum (<sl_k, sl_v> in sub_l) sum (<sp_k, sp_v> in sub_p) if ((sl_k.l_partkey == sp_k.p_partkey)) then { concat(sl_k, sp_k) -> sl_v * sp_v } else {  }
let rmp = sum (<r0_k, r0_v> in Rm0) < revenue=(r0_k.l_extendedprice * (1 - r0_k.l_discount)) * r0_v >
let tmp = { < revenue=rmp.revenue > -> 1 }
tmp