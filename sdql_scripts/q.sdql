let part = load[{<p_partkey: int, p_name: string, p_mfgr: string, p_brand: string, p_type: string, p_size: int, p_container: string, p_retailprice: double, p_comment: string> -> int}]("T:/UG4-Proj/datasets/part.tbl")
let lineitem = load[{<l_orderkey: int, l_partkey: int, l_suppkey: int, l_linenumber: int, l_quantity: int, l_extendedprice: double, l_discount: double, l_tax: double, l_returnflag: string, l_linestatus: string, l_shipdate: date, l_commitdate: date, l_receiptdate: date, l_shipinstruct: string, l_shipmode: string, l_comment: string> -> int}]("T:/UG4-Proj/datasets/lineitem.tbl")
let Rm0 = sum (<lin_k, lin_v> in lineitem) sum (<par_k, par_v> in part) if ((lin_k.l_partkey == par_k.p_partkey)) then { concat(lin_k, par_k) -> lin_v * par_v } else {  }
let rmp = sum (<r0_k, r0_v> in Rm0) if (((((((((((r0_k.p_brand == "Brand#54") && ((((r0_k.p_container == "SM PKG") || (r0_k.p_container == "SM PACK")) || (r0_k.p_container == "SM CASE")) || (r0_k.p_container == "SM BOX"))) && (1 <= r0_k.l_quantity)) && (r0_k.l_quantity <= 11)) && (1 < r0_k.p_size)) && (r0_k.p_size < 5)) && ((r0_k.l_shipmode == "AIR REG") || (r0_k.l_shipmode == "AIR"))) && (r0_k.l_shipinstruct == "DELIVER IN PERSON")) || ((((((((r0_k.p_brand == "Brand#22") && ((((r0_k.p_container == "MED PACK") || (r0_k.p_container == "MED PKG")) || (r0_k.p_container == "MED BAG")) || (r0_k.p_container == "MED BOX"))) && (18 <= r0_k.l_quantity)) && (r0_k.l_quantity <= 28)) && (1 < r0_k.p_size)) && (r0_k.p_size < 10)) && ((r0_k.l_shipmode == "AIR REG") || (r0_k.l_shipmode == "AIR"))) && (r0_k.l_shipinstruct == "DELIVER IN PERSON"))) || ((((((((r0_k.p_brand == "Brand#13") && ((((r0_k.p_container == "LG PKG") || (r0_k.p_container == "LG PACK")) || (r0_k.p_container == "LG CASE")) || (r0_k.p_container == "LG BOX"))) && (26 <= r0_k.l_quantity)) && (r0_k.l_quantity <= 36)) && (1 < r0_k.p_size)) && (r0_k.p_size < 15)) && ((r0_k.l_shipmode == "AIR REG") || (r0_k.l_shipmode == "AIR"))) && (r0_k.l_shipinstruct == "DELIVER IN PERSON")))) then { r0_k -> 1 } else {  }
let tmp = sum (<r_k, r_v> in rmp) < revenue=(r_k.l_extendedprice * (1 - r_k.l_discount)) * r_v >
let tmpa = { < revenue=tmp.revenue > -> 1 }
tmpa